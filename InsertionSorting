//practice: sorting an array- Selection Sorting
#include <iostream>
using namespace std;

void fillArray(int a[], int size, int& numberUsed);
void sort(int a[], int numberUsed); //
void swapValues(int& v1, int& v2);
int indexOfSmallest(const int a[], int startIndex, int numberUsed);

int main() 
{
	cout << "This program sorts numbers from lowest to highest. \n";
	int sampleArray[10], numberUsed;

	fillArray(sampleArray, 10, numberUsed);
	sort(sampleArray, numberUsed);

	cout << "In sorted order the numbers are: \n";
	for (int index = 0; index < numberUsed; index++) //from 0 to length of array.
		cout << sampleArray[index] << "  "; //print out the sorted array
	cout << endl;

	return 0;

}

void fillArray(int a[], int size, int& numberUsed)
{
	cout << "Enter up to " << size << " non-negative whole numbers. \n"
		<< "Mark the end of the list with a negative number. \n";
	int next, index = 0;
	cin >> next; //index value
	while ((next >= 0) && (index < size)) //negative number: end point
	{
		a[index] = next;
		index++;
		cin >> next;
	}
	numberUsed = index;
}

void sort(int a[], int numberUsed)
{ //1.get smallest index by using indexOfSmallest(), 
	//2. swap the value with it by increasing index number untill the end of the array.
	int indexOfNextSmallest;
	for (int index = 0; index < numberUsed - 1; index++)
	{
		indexOfNextSmallest =	 indexOfSmallest(a, index, numberUsed); //indexOfSmallest returns the index of the smallest value.

		swapValues(a[index], a[indexOfNextSmallest]); //change the a[0] and the smallest, a[1] and the next smallest... and so on.
	}
}

void swapValues(int& v1, int& v2)
{
	int temp;

	temp = v1;
	v1 = v2;
	v2 = temp;
}

int indexOfSmallest(const int a[], int startIndex, int numberUsed)
{
	int min = a[startIndex];
	int indexOfMin = startIndex;

	for (int index = startIndex + 1; index < numberUsed; index++)
		if(a[index]<min) //ex: a[1] < a[0]. finding minimum value and its index.
	{
			min = a[index];
			indexOfMin = index;
	}
	return indexOfMin; //returns the minimum index to sort()
}
